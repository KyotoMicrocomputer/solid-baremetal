; ホストインタフェース
; ホストパソコンとPARTNER-Jet2を接続するインタフェースの種類やアドレスを設定します。
;  Ex. USB接続の場合(単体)
;	PORT ADDRESS	USB
;  Ex. USB接続の場合(複数台のPARTNER-Jet2が同一のPCに接続されている場合)
;	PORT ADDRESS	USB:本体シリアルナンバー
;	  本体底面記載のシリアルナンバーを記述することで機器の選択ができます。
;
;PORT ADDRESS	USB
;PORT ADDRESS	USB:L0100010
PORT ADDRESS	USB


; Coresight インターフェース設定(CS_CONFIG)
; CoreSight接続の場合のみ、設定可能です。
; ターゲットのデバッグシステムがCoresight の場合に、接続インターフェースを設定します。
;   JTAG-DP[,J<port no.>]   : JTAG デバッグポート接続
;   SW-DP[,J<port no.>]     : シリアルワイヤデバッグポート接続
;               通常のCortexコアの場合は第2パラメータは省略します。
;               ARM7/9/11などレガシーコアをJTAG-AP接続している場合は第2パラメータでポート番号(0-7)を指定します。
; デフォルト(未指定時)は JTAG-DP です。
;
;CS_CONFIG	JTAG-DP
;CS_CONFIG	SW-DP
CS_CONFIG	SW-DP


; J_FRQ
; JTAGクロック周波数を設定します。
; 設定可能な周波数範囲は、1K から 70MHz(Model10)/100MHz(Model20)です。
; 周波数のほかに、オプションでTDO信号のサンプルタイミングの指定もできます。
; サンプルタイミングCPUのTDO信号のサンプルタイミングで、以下の３通りから選択します。
;   Standard:　立下りエッジでサンプルします。通常はこの設定です。(デフォルト値)
;       Fast:  速度と安定性のバランスのとれた設定です。Standardより高速なクロックが使用できます。
;      Turbo:　より高速なクロックで動作する可能性がありますが、動作できない危険もあります。
;       Rise:　立ち上がりエッジでサンプルします。最も安全な設定ですが低速なクロックを設定する必要があります。
; 最初は10MHzのStandardをお奨めします。
;  Ex. 自動設定の場合
;	J_FRQ    AUTO
;       AUTO設定で動作しない場合はマニュアルで遅いクロックを設定してみてください。
;       たとえば、  "J_FREQ  1,Rise"など。
;	AUTOで起動した後は、ZJCコマンドでクロック周波数を確認できます。以降は、AUTOでなく確認した周波数を設定することをお勧めします。
;  Ex. アダプティブモードの場合
;	RTCK信号が配線されている必要があります。JTAGクロック周波数はターゲット
;	の状態に応じて自動追従します。(ARM9/ARM11で有効)
;	J_FRQ	ADPTX
;  Ex.マニュアル設定
;	J_FRQ	16		... 16MHz
;	J_FRQ	200K,Rise	... 200KHz , ライズモード
;	J_FRQ	50,Fast		... 50MHz , ファストモード
;	J_FRQ	6.6,Standard	... 6.6MHz , スタンダードモード
;	J_FRQ	60,Turbo	... 60MHz , ターボモード
;J_FRQ	AUTO
;J_FRQ	ADPTX
;J_FRQ	60,Turbo
;J_FRQ	45,Fast
;J_FRQ	16
;J_FRQ	8
;J_FRQ	1
;J_FRQ	200K
J_FRQ	8


; J_VCC
; JTAG信号の電圧を指定します。1.0 〜 3.6Vのいずれかを設定します。
; ターゲットCPUのJTAG端子のI/O電源電圧を設定してください。
;     J_VCC volt[,{vtref|vsup}[,{vtref|vsup}]]
;   第２パラメータはターゲット電源を監視をするプローブの信号を指定します。(省略時Vtref)
;   JTAGとTRACEの信号レベルが異なる場合に第３パラメータを指定します。
;   この場合、第２パラメータがJTAG電圧で第３パラメータはTRACE電圧です。
;  Ex.
;	J_VCC	3.3		... 3.3V Vtrefピンで電圧監視
;	J_VCC	1.8,vsup	... 1.8V Vsupピンで電圧監視 
;	J_VCC	3.3,vsup,vtref	.., JTAG:3.3V,Vsupピン監視 , TRACE:Vtrefピン監視 
;J_VCC	3.3
;J_VCC	3.0
;J_VCC	2.5
;J_VCC	1.8
J_VCC  2,vtref,int


; CPU名とコア番号の指定
; ARM7CPUでキャッシュ&MMU内蔵しているの場合 700 を設定
; ARM7CPUでキャッシュ&MMU内蔵していない場合 70 を設定
; ARM9CPUでキャッシュ&MMU内蔵しているの場合 900 を設定
; ARM9CPUでキャッシュ&MMU内蔵していない場合 90 を設定
; ARM926の場合 926T を設定
; ARM946の場合 946T を設定
; ARM925(OMAP1510/5910)の場合 925Tを設定
; ARM1136の場合 1136を設定
; ARM1156の場合 1156を設定
; ARM1176の場合 1176を設定
; ARM11MPCoreは 11MPCを設定
; ARM11以前のチップでTHUMB対応の場合は、CPUタイプの後ろに 'T' を付加します。
; ARM11以前のチップVFP対応のチップ(ARM1136JF-Sなど）ではCPUタイプの後ろに 'F' を付加します。
; Cortex系で対応しているコア
;   Cortex-A5/7/8/9/15
;   Cortex-R4
;   Cortex-M3/4/0/0+
; 第2パラメータには、マルチコアCPUのコア番号を指定します。各コアに０から通し番号をつけてください。
;
;CPU CORE	70T
;CPU CORE	700T
;CPU CORE	90T
;CPU CORE	900T
;CPU CORE	926T
;CPU CORE	946T
;CPU CORE	1136T
;CPU CORE	11MPC
;CPU CORE	Cortex-A5
;CPU CORE	Cortex-A7
;CPU CORE	Cortex-A8
;CPU CORE	Cortex-A9
;CPU CORE	Cortex-A15
;CPU CORE	Cortex-R4
;CPU CORE	Cortex-M3
;CPU CORE	Cortex-M4
;CPU CORE	Cortex-M0
;CPU CORE	Cortex-M0+
CPU CORE	CORTEX-M7


; CPU固有の型番を設定します
; CPU固有の機能に対応するために設定します。
; 一般的な汎用CPUでは通常この設定は必要ありません。
CPU_TYPE	SAM_V71


; CoreSight ROM テーブルの手動設定 (Cortex-A/R シリーズ)
; Cortex-A/RシリーズのROMテーブルを手動で設定する場合に記述します。
; CS_ROM_TBL を1つでも記述した場合、CPUのROMテーブルは参照されなくなりますので
; 必要なすべてのデバイスを記述する必要があります。
;
; 書式
;  CS_ROM_TBL  {device-type},{base_adr}
;   device-type : デバイスのタイプ
;   base_adr    : デバイスのベースアドレス
; device-type  ,  Compornent name , Remarks
;        0x11     TPIU/SWO          ETM/PTMトレースを使用する場合に必要です。
;        0x12     Funnel            ETF/ETM/PTMトレースを使用する場合に必要です。
;        0x13     ETM/PTM           ETM/PTMトレースを使用する場合に必要です。
;        0x14     CTI               ハード同期実行/ブレークに必要です。
;        0x15     CPU               デバッグの開始に必要です。(手動設定の場合は必須)
;        0x16     PMU
;        0x21     ETB               ETBトレースを使用する場合に必要です。
;        0x32     ETF               ETF/ETM/PTMトレースを使用する場合に必要です。
;        0x43     ITM               ITMトレースを使用する場合に必要です。
;
;CS_ROM_TBL	21,e12a1000	;HM_ETB
;CS_ROM_TBL	11,e12a3000	;HM_TPIU
;CS_ROM_TBL	12,e12a4000	;HM_FUNNEL
;CS_ROM_TBL	15,e12b0000	;HM_CoreDebug0
;CS_ROM_TBL	15,e12b2000	;HM_CoreDebug1
;CS_ROM_TBL	13,e12bc000	;HM_PTM0
;CS_ROM_TBL	13,e12bd000	;HM_PTM1
;CS_ROM_TBL	14,80038000	;HM_CTI0
;CS_ROM_TBL	14,80039000	;HM_CTI1


; ターゲットCPUのエンディアン
;	BIGエンディアンのときは、 bigを指定します。
;	Littleエンディアンのときは、littleを指定します。
;          (ARMv6以降でBE-8で使用する場合もLittleを指定します。)
; EX.	ENDIAN	LITTLE		... リトルの場合
;	ENDIAN	BIG		... ビッグの場合(BE-32 レガシービッグエンディアン)
;ENDIAN	LITTLE
;ENDIAN	BIG
ENDIAN	LITTLE


; CFG_ARM_L2C
; L2キャッシュコントローラ(ARML210/220など)が内蔵されたCPUでは、
; その物理アドレスを設定します。
; ARML_L2Cが存在しない場合は、この項目の設定は行いません。(コメントアウト)
; ex. 物理アドレス 0xe0000000番地にARML210がある場合
;	CFG_ARM_L2C  e0000000
;CFG_ARM_L2C	e0000000
;CFG_ARM_L2C	30000000


; ブレーク時のキャッシュの制御方法を指定します。
;   KEEP    : キャッシュの状態を保持します。
;   OFF     : L1キャッシュをフラッシュしてOFF状態にします。(L2キャッシュの状態は保持します)
;   ALLOFF  : L1キャッシュとL2キャッシュをフラッシュしてOFF状態にします。
; デフォルト(未指定時)は KEEP です。
;
;BRK_CACHE_MODE	OFF
;BRK_CACHE_MODE	KEEP
;BRK_CACHE_MODE	ALLOFF


; バーチャルリンク(VLINK)の指定です。
;	VLINK	OFF		.. バーチャルリンクを使用しません
;	VLINK	CPU		.. JTAGでバーチャルリンクを使用します
;VLINK	CPU
;VLINK	OFF
VLINK	OFF


; JTAG chain config
; JTAG カスケード接続情報の設定
;	J_CONFIG チップ数,チップ位置(TDO側=0),IR_lenビット数(TDO側),IR_lenビット数(TDI側)
; 単独で接続されている場合(通常)は、設定しません。
;J_CONFIG	3,1,6,8
;J_CONFIG	3,2,8,0
;J_CONFIG	3,1,4,4


; JTAG　ブートwait時間
; デバッガ起動時および初期化時に、リセット出力後デバッグモードに
; 入るまでの待ち時間を秒単位で指定します。
; 通常は、この設定は必要ありません。(デフォルトは 0設定)
; CPUのリセット解除後にユーザプログラムを指定間走らせることで必要な初期化を行い、
; その後デバッガを接続する設定です。
; 第２パラメータに BYPASS を設定すると、指定された待ち時間の期間にJTAGの接続テスト(BYPASSコマンド)を
; 行い、接続テストにパスした時点でウェイトを抜け起動動作を再開します。FPGAのコンフィギュレーション待ちなどで待ち時間が変化する場合に
; 最適な待ち時間を挿入できる場合があります。
; EX.	J_BOOT_WAIT	2	... 2秒の待ち時間
; EX.	J_BOOT_WAIT	0.5	... 0.5秒の待ち時間
; EX.	J_BOOT_WAIT	10,BYPASS ... 最大10秒の待ち時間/BYPASSテストにパスした時点でウェイトを抜けます。
;J_BOOT_WAIT	0
;J_BOOT_WAIT	0.5
;J_BOOT_WAIT	2
J_BOOT_WAIT	0


; リセットディレー(J_RST_DELAY)
; JTAGコネクタからのリセット信号nSRSTをネゲートしたあとJTAGの動作を行うまでの
; 遅延をm秒単位で指定します。 この設定は通常行う必要はありません。
; この設定がない場合は遅延はありません。
; nSRST信号のネゲート後すぐにJTAG動作を行うと問題が発生するCPUやボードで
; 設定してください。(リセット解除後PLL安定待ちが必要な場合など)
; EX. J_RST_DELAY   1000		... ｎSRST信号のネゲート後にJTAG操作の前に1000m秒のディレーを入れます。
;J_RST_DELAY	1000


; デバッガ起動時のCPUリセット制御(J_NO_RST_BOOT)
; デバッガ起動時にCPUリセットをするかどうかを指定します。
;  EX .. J_NO_RST_BOOT	OFF	... リセットします(ブレーク状態)
;        J_NO_RST_BOOT	ON	... リセットしません(ブレーク状態)
;	 J_NO_RST_BOOT	RUN	... リセットしません(RUN状態)
; RUN指定では、デバッガ起動後もCPUは実行状態です。
; ONまたはRUNを指定した場合はINIT項目の実行は行われません。
; デフォルト(未指定時)はOFFです。
;J_NO_RST_BOOT	OFF
;J_NO_RST_BOOT	ON
;J_NO_RST_BOOT	RUN
J_NO_RST_BOOT	OFF


; SLIP起動モード(J_BOOT_MODE)
; デバッガ起動時のプログラムカウンタをデバッガ接続時のままにするか、リセットベクタに設定し直すかを選択します。
;   SLIP    : プログラムカウンタ/コントロールレジスタはデバッガ接続時の状態を維持します。(INIT項目を実行しません）
;   SLIPI   : プログラムカウンタ/コントロールレジスタはデバッガ接続時の状態を維持します。(INIT項目を実行します）
;   OFF     : プログラムカウンタ/コントロールレジスタを初期化します。
; デフォルト(未指定時)は OFF です。
; リセット入力によりデバッグ資源もリセットされる等の理由で、リセットから遅れてデバッグモードに入る場合に指定します。
; SLIPを指定しない場合は、実行された状態から強制的にPCをリセットベクタに戻すため、リセットシーケンスの2重実行等により
; その後の実行が異常になる可能性があります。SLIPを指定した場合は起動後に正しいシーケンスで実行を継続することができます。
; (但し、この場合はリセットシーケンスの最初からデバッグすることはできません)。
;J_BOOT_MODE	SLIP
;J_BOOT_MODE	SLIPI
;J_BOOT_MODE	OFF


; 電源断の処理を指定します。
; ターゲットの電源OFFを検知後、再投入されると自動的に初期化コマンド（init）が実行されます。
; その後のCPUの状態を指定できます。
; J_P_OFF_MODE  [GO | HALT]
;   HALT : CPU停止状態(ブレーク状態)になります。(デフォルト)
;   GO   : 電源断発生時の状態が、実行中だった場合、再実行されます。
;          CPU停止状態(ブレーク状態)だった場合には、ブレーク状態になります。
;J_P_OFF_MODE	HALT
;J_P_OFF_MODE	GO


; nSRST信号検出(この項目は旧書式。J_RST_DETECTでの設定を推奨!)
;  リセット信号を検出した場合に自動的にデバッガの初期化を行うかどうかを指定します。
;  リセット検出時の動作
;    YES  : デバッガを初期化します。
;    NO   : デバッガを初期化しません。
; デフォルト(未指定時)は YES です。
;  リセット入力によってデバッグ機能が初期化されない場合は無効(NO)にすることができます。
;
;J_NSRST_CHK	YES
;J_NSRST_CHK	NO


; ETM機能の制御
;  ex. ETM    ON       ... ETM機能をTPIU出力で使用します。(デフォルト)
;  ex. ETM    OFF      ... ETM機能を使用しません。
;  ex. ETM    ETB      ... ETM機能をETB出力で使用します。(ETBを実装している場合)
;  ex. ETM    ETR,<アドレス>,<サイズ>[,セキュアモード]
;                      ... ETM機能をETR出力で使用します。(ETRを実装している場合)
; ETM機能(リアルタイムとレース)を使用するかどうかを設定します。
; ETMを使用できる条件でも強制的にETMを使用しない場合に OFF を設定してください。
; ETM(TPIU)機能のための端子は一般的に他の目的の端子とマルチプレックスされている場合があります。
; この場合、ETMを有効にするとETM端子とマルチプレックスされた他目的の端子
; のファンクションが使用できません。他目的の機能を使用する場合にETMをOFF
; してください。
; ETM ON,{分周比},{ポートサイズ}[,タイミング]
;  分周比(ARM11のみ)
;    トレースクロック分周比   1,2,3,4
;	 ARM1136(ETM11RV)では 2 or 4　以外は設定禁止です
;	 ARM1176/Cortex-A8(ETM11CS)では 1を設定してください
;  ポートサイズ(ARM11以降)
;    トレースポートサイズ   4,8
;  タイミング(ON指定時のみ)
;    トレース信号のサンプルタイミングを指定できます。(/P0,/P1,/PDnnn)
;    通常は省略。詳細はハードウェアマニュアル。設定マニュアルを参照。
; 
; ETR機能を使う場合
;  この機能はETRモジュールが実装されている場合に使用できます。
; トレースパケットをETRではシステムメモリに格納するため、Model10でも利用できます。
;  ETM    ETR<アドレス>,<サイズ>[,セキュアモード]
;     <アドレス>         ... トレースデータを保存する物理メモリ領域の先頭アドレスを16進数で設定。256バイト境界のアドレス
;     <サイズ>           ... ETRで使用するメモリのサイズ(最大2MB)を指定します。
;     [セキュアモード]   ... /S(デフォルト) または /NS を指定。非セキュア空間を指定する場合は /NS を指定。
;
; Cortex-M0+ でMTB機能を使用する場合は以下の様に設定してください。
;  ETM     MTB,<アドレス>,<サイズ>
;     <アドレス>    ... 内蔵SRAM空間の中でMTBが使用する空間の先頭アドレスを指定します。
;     <サイズ>      ... MTBで使用するメモリのサイズを指定します。
;ETM	OFF
;ETM	ON
;ETM	ON,2,8
;ETM	ON,1,8
;ETM	ETB
;ETM	ETR,0x20000000,0x1000
;ETM	MTB,0x20000000,0x100
ETM      ON,1,4


; ITM機能の制御 (Cortex-A/Cortex-Mシリーズ)
; CoresightのITM(Instrumentation Trace Macrocell)機能を設定します。
; ITMデータの出力先はCPUの構成により SWO,TPIU,ETB のいずれかが選択できます。
; 出力先をSWOに指定する場合はCS_CONFIG の設定項目で SW-DP (シリアルワイヤーデバッグモード)を
; 選択する必要があります。
; 出力先をTPIUに指定する場合はETM機能の設定と同様にトレースポートサイズ、トレースクロック分周比、
; トレース端子の設定を行う必要があります。
;
;   書式1
;        ITM   SWO[,/P=<プリスケール>][,/TSS={ON|OFF}][,/SYNC={ON|OFF}],/LOG=<ポート番号>[,<表示形式>][,DUMP]
;
;   SWOにITMを出力します。ITMのデータは<表示形式>により、リアルタイムにLOGウインドウに表示します。
;   またパケットDUMP形式でヒストリウインドウにITMデータを表示します。
;
;   /P=<プリスケール> : ITMのプリスケールを 1 ~ 0x1fff の範囲で指定します。
;                       省略時の値は5です。
;
;   /TSS={ON|OFF} : タイムスタンプパケットを出力する/しないを指定します。
;                   省略時はON(出力する)です。
;
;   /SYNC={ON|OFF} : SYNCパケットを表示する／しないを指定します。
;                    省略時はOFF(表示しない)です。
;
;   /LOG=<ポート番号> : LOGウインドウに表示するスティミュラスポートの番号を 0 ~ 31 の範囲で指定します。
;                       複数のポートを指定する場合は ',' で区切ります。
;                       また'-'によって番号を範囲指定することもできます。
;                       この項目を省略するとLOGウインドウへのITMデータの表示は行いません。
;
;                         [例]
;                            /LOG=1,2,10-31
;
;   <表示形式> : スティミュラスポートのデータを表示する形式を指定します。
;                この設定は <ポート番号> で指定したすべてのポートに対して適用されます。
;                それぞれのポートに対して別々の設定を行うことはできません。
;
;                  HEX      ... 16進数
;                  DEC      ... 10進数
;                  省略時   ... 文字列
;
;    DUMP : パケットダンプ表示を行います。
;           この指定を行った時は文字列は1文字単位で表示されます。
;
;   書式2
;        ITM   TPIU[,分周比][,ポートサイズ][,/TSS={ON|OFF}][,/SYNC={ON|OFF}]
;
;   TPIUにITMを出力します。ITMのデータはパケットDUMP形式でヒストリウインドウに表示します。
;   この機能はTPIU出力機能があるCPUで、ITMの出力がFunnel等によりTPIUに繋がっている必要があります。
;   また、トレースメモリを使用するためPARTNET-JET2のモデル20以上が必要です。
;   "分周比"、"ポートサイズ" の設定項目やETMを使用ための条件については ETM の設定項目を参照してください。
;
;   書式3
;        ITM   ETB[,/TSS={ON|OFF}]
;
;   ETBにITMを出力します。ITMのデータはパケットDUMP形式でヒストリウインドウに表示します。
;   この機能はETBが使用できるCPUで、ITMの出力がFunnel等によりETBに繋がっている必要があります。
;ITM	ETB
;ITM	TPIU
;ITM	SWO,/P=20,/LOG=0,HEX,DUMP
;ITM	SWO,/P=20,/LOG=0


; BusTrace機能の制御 (Model30のみ)
; BusTraceユニットを使って、データのロギング（バストレース）を行う場合に設定します。
; ETM/ITMなどの他のトレース機能と同時に使用することはできません。
; この機能は、本体モデルがModel30でBusTraceユニットを接続時のみ使用できます。
;   書式
;        BUSTRC [ON|OFF]
;         ON   ... バストレース機能を使用します。
;         OFF  ... バストレース機能を使用しません。
;         本設定の省略時は OFF です。
;BUSTRC	ON
;BUSTRC	OFF
BUSTRC	OFF


; トレース用メモリ確保の設定
; ロードさせたプログラムのメモリイメージをホストパソコン上に確保されたメ
; モリに保存するか否かを指定します。
;
; JTAG使用時、ETMの機能によってヒストリ（リアルタイムトレース）を実現
; します。その場合、逆アセンブル表示をする時にターゲットメモリの内容を参
; 照しますが、その参照する場所をターゲットメモリにするか、ホストパソコン
; 上に確保されたメモリにするかを選択します。
;  ex. ALLOC MEMORY	1	... ホストパソコンにコードを保存する
;  ex. ALLOC MEMORY	0	... ホストパソコンにコードを保存しない
; コードを保存しない場合にはターゲットプログラム実行中はヒストリを
; 逆アセンブル表示できませんが、ホストパソコンのメモリ使用量を減らせます。
; ETM機能が無効の場合は、この設定は意味を持ちません。
;ALLOC MEMORY	1
;ALLOC MEMORY	0
ALLOC MEMORY	1


; 強制ブレークの代替方法
; ESCキーなどの強制ブレークが正しくできない場合に、0を設定してください。
; 通常は1を設定します。CPUによっては、0を設定する必要があります。
; このフィールドがコメントの場合は１が設定されます。
; CPUの低電力モードなどが原因でJTAG動作が停止してハングアップする場合は
; 3を設定してください。ハングアップダイアログで、EDBGRQ信号を使ったブレーク
; 要求を出すことで、低電力モードを脱出できる場合があります。
;J_FBRK	1
;J_FBRK	0
J_FBRK	1


; ARM720/920などキャッシュON空間のデバッグをする場合のキャッシュコントロール用
; モニタ空間のアドレス(RAM空間)指定（64バイト使用)
;	JMONITOR ADDRESS	OFF		モニタ未使用(キャッシュON空間のデバッグ不可)
;	JMONITOR ADDRESS	SP		モニタをSP(r13)で示すメモリ空間指定　[ARM9では設定不可]
;	JMONITOR ADDRESS	a0000800	モニタを絶対アドレス(0xa0000800番地)指定
; ARM926/946およびARM11系以降の新しいCPUでは通常OFFを設定してください。
; これらのCPUはOFF設定でキャッシュON空間のデバッグが可能です。
;JMONITOR ADDRESS	OFF
;JMONITOR ADDRESS	SP
;JMONITOR ADDRESS	0x60000100
JMONITOR ADDRESS	OFF


; モニタ(SVC/UND/FIQ)の使用するスタックの初期値
; モニタのワークとしてスタックを使用するようにモニタのソースで設定した場合
; このフィールドでデバッガ起動時の初期スタックを設定できます。
; 通常はこの設定は不要です。
;MONITOR INIT. STACK	c1000000
;MONITOR INIT. STACK	00500000


;  FLASH書き込み用ワークRAMエリアの設定(FLASH WORK)
;  書式 FLASH_WORK  アドレス[,サイズ][,/mode]
;  サイズは省略可能(省略時:4K)です
;  modeには、動作モードを設定します
;     ON   .. 起動時ワークRAMを使用
;     OFF  .. 起動時ワークRAMを使用しない
;     AUTO .. 起動時ワークRAMを使用/１回実行するとワーク未使用に変更
;  modeは、zf workコマンドで起動後に変更できます
;  この設定がコメントの場合は、ワークRAMは使用しません
;  初期段階ではコメントでの使用を推奨します(正常なFlash書き込みを確認後に必要なら設定してください）
;FLASH_WORK	60001000


; Flash memory の設定
; FLASH MEMORY	開始アドレス,終了アドレス,<boot_sect>,CPUバス幅[,FLASHバス幅][,オプション情報]
;	boot_sectは、ブートセクタのタイプを設定します。
;	   [SPANSIONタイプ]
;		NO 	... ブートセクタなし
;		TOP	... トップブートタイプ(32K,8K,8K,16K構成)
;		BOTTOM	... ボトムブートタイプ(16K,8K,8K,32K構成)
;		TOP8	... トップブートタイプ(8K x 8構成 MBP29DL32xなど)
;		BOTTOM8	... ボトムブートタイプ(8K x 8構成 MBP29DL32xなど)
;		BOTH8	... 両ブートタイプ(8K x 8 MB29DL640Eなど)
;		BOTH32  ... 両ブート(32Kx4)
;		TOP32   ... トップブートタイプ(32Kx4)のフラッシュメモリ(S29WSxxxW20)
;		BOTTOM32... ボトムブートタイプ(32Kx4)のフラッシュメモリ(S29WSxxxW40)
;	   [Intel/シャープタイプ]
;		NOIS 		... ブートブロックなし(64Kブロック)
;		NOIS128		... ブートブロックなし(128Kブロック 28FxxxJ3/K3など)
;		TOP8IS		... トップブートタイプ(64KxN + 8Kx8構成 28FxxxC3など)
;		BOTTOM8IS	... ボトムブートタイプ(8Kx8 + 64KxN構成 28FxxxC3など)
;		TOP32IS128	... トップブートタイプ(128KxN + 32Kx4構成 28FxxxL30/18など)
;		BOTTOM32IS128	... ボトムブートタイプ(32Kx4 + 128KxN構成 28FxxxL30/18など)
;	   [GENUSIONタイプ]
;		NOGE 	... ブートブロックなし(512Kブロック)
;	CPUバス幅は、CPUのバスサイズを8/16/32で設定
;	FLASHバス幅は、メモリデバイスのバスサイズを8/16で設定
;       ただし、AMD/富士通タイプで16/8bit兼用タイプを8bitで使う場合は9を設定
;       オプション情報は、デバイスの付加情報を設定します。
;    	    /C   : AMD/富士通タイプで連続書き込みサポートのデバイス(MB29DL32x/640など)で指定
;           /B   : バッファライトをサポートしている場合に指定で高速化(バッファサイズ16)
;           /Bn  : バッファライトをサポートしている場合に指定で高速化(バッファサイズn / n=16,32,64,128,256,512のいずれか)
;		   バッファサイズは、ROMへの書き込み回数です。(たとえば16bitROMで n=32 指定時は そのROMに64Byteのデータを転送します)
;           /S128: ブートブロック以外のノーマルセクタのサイズが128KBの時に設定
;	    /M7ff: コマンド長(A0-A10) 
;	    /U   : Samsung FLASH(K8A5615)などのライトプロテクト解除を自動実行します。(SPANSIONタイプ)
;	    /S4  : セクタのサイズが4KBの時に設定(ブートブロックなし）
;	    /Ax  : アルゴリズムの違い。デバイス固有(FLASH.txtのとおりに設定してください)
;FLASH MEMORY	00000000,000fffff,BOTTOM,16
;FLASH MEMORY	04000000,040fffff,BOTTOM,16
;FLASH MEMORY	00000000,000fffff,BOTTOM,16
;FLASH MEMORY	04000000,047fffff,BOTH8,16,16,/C
;FLASH MEMORY	00000000,003fffff,BOTTOM8,16,16,/C


; ＰＡＲＴＮＥＲのコマンドでアクセス可能なメモリ領域（最大２０領域）
; MAP	開始ｱﾄﾞﾚｽ，終了ｱﾄﾞﾚｽ
; PARTNERのコマンドでアクセス可能な範囲を開始アドレスと終了アドレスで指定します。
;
;	EX.	MAP	10000000,1000FFFF
;		MAP	FFF00000,FFFFFFFF
MAP			00000000,ffffffff


; ターゲットで使用するFPB番号を指定します  (Cortex-Mシリーズのみ)
; PARTNERは内蔵FLASH空間でのソフトウエアブレークや関数ステップ実行にFPB機能を使用します。
; ここで指定した番号のFPBはPARTNERが使用しません。
; ブレークに使用できるFPBがなくなった場合は内蔵FLASHにブレーク命令を書き込みます。
; 内蔵FLASHの書き込みが行えない場合はソフトウエアブレーク、関数ステップ、及びCOME実行が行えなくなります。
; 書式
;  FPB_RESERVE   0,1,3-4  : 0,1,3,4 をターゲットで使用
;  FPB_RESERVE   0-       : すべての番号をターゲットで使用
;
;FPB_RESERVE	0-2


; リセット方法の選択 (Cortex-Mシリーズのみ)
; Cortex-Mシリーズの場合に、ターゲットのリセット方法を選択します。
;  書式1
;    CORTEX-M_RST   HW_SRST
;      SRST信号の出力  : 行う
;      SYSRESETREQ     : 行わない
;
;  書式2
;    CORTEX-M_RST   SYSRESETREQ
;      SRST信号の出力  : 行わない
;      SYSRESETREQ     : 行う
;
;  書式3
;    CORTEX-M_RST   HW_SRST,SYSRESETREQ
;      SRST信号の出力  : 行う
;      SYSRESETREQ     : 行う
; この項目は J_NO_RST_BOOT OFF(リセットする) と J_BOOT_MODE OFF(スリップしない)を設定した場合に有効です。
; デフォルト(未指定時)は HW_SRST になります。
;CORTEX-M_RST	HW_SRST
CORTEX-M_RST	SYSRESETREQ
;CORTEX-M_RST	HW_SRST,SYSRESETREQ


; Coresight アクセスポート設定(CS_APSEL)
; CoreSight接続の場合のみ、設定可能です。
; ターゲットのデバッグシステムがCoresight の場合に、アクセスポートの設定をします。
; 通常は本設定をしなくても問題はありませんが、アクセスポートの番号が特殊なター
; ゲットの場合には、本設定を記述する事でデバッガが起動しないなどの問題が解消され
; る場合があります
;
; 書式
;   CS_APSEL  {AHB|AXI|APB|JTAG|CTEXM}:番号	  ... APSEL手動設定
;   CS_APSEL  SCAN                    ... APSEL自動解析
;
;CS_APSEL	SCAN
CS_APSEL	SCAN


; APB/AHB アクセスポート経由　での初期化をします。
; CoreSight接続の場合のみ、設定可能です。
; DAP(Debug Access Port)を初期化した直後、"INIT"の前に行います。
;
; 書式
;  CS_INIT0  {CMD},{Adr},{Data}[,{Mask}]
;	CMD : アクセスするポートとデータサイズを指定します。
;		APBOD = APBへの32bit データ書き込み
;		AHBOB = AHB/AXIへの8bit  データ書き込み
;		AHBOW = AHB/AIXへの16bit データ書き込み
;		AHBOD = AHB/AXIへの32bit データ書き込み
;		  システムに複数のAHB-APやAXI-APがある場合は、AXI-AP優先でかつapsel番号が若いAPがアクセス対象になります。
;	      特定のapselを指定してアクセスする場合は以下のように記述します。
;		MEMAPOB:n = MEMAPへの8bit  データ書き込み(nはapsel番号を指定)
;		MEMAPOW:n = MEMAPへの16bit データ書き込み(nはapsel番号を指定)
;		MEMAPOD:n = MEMAPへの32bit データ書き込み(nはapsel番号を指定)
;		　ex.. apsel=2/Adr=e0000000/DAta=00000001 32bit書き込みの例
;                 　　  CS_INIT0 MEMAPOD:2,e0000000,00000001
;	Adr : アドレスを指定します。
;	Data: 書き込むデータを指定します。ビット単位でマスク指定可能
;	Mask: マスク値を指定します。Mask値で1が指定されたbitのみ更新されます。
;	      Mask値は省略可能です。省略した場合はすべてのbitが更新されます。
;	      すべてのbitがマスクされた場合、指定されたアドレスの読み出し動作
;	      のみ行われます。
;
;CS_INIT0	APBOD E128F000,@1xx1xxxx_xxxxxx11_xxxxxxxx_xxxxxxxx
;CS_INIT0	APBOD E128F004,@xxxxxxxx_xxxxxxx1_xxxxxxxx_xxxxxxxx


; ユーザプログラムでのAPBアクセス許可を設定します。
; デフォルトではアクセス可能に設定されています。
;
; 書式
;  CS_APB_SW_ENABLE	{TRUE | FALSE}
;	TRUE  ... プログラムでのAPBアクセスを許可します。
;	FALSE ... プログラムでのAPBアクセスを禁止します。
;
; ユーザプログラムからPARTNERが使用するデバッグ資源（ハードウェアブレーク関連のレジスタなど）に
; アクセスされた場合、レジスタの値などが変更され、設定したブレークポイントで停止しないなど、
; 予期しない動作をする可能性があります。
; その場合は、FALSEに設定してユーザプログラムでのAPBアクセスを禁止してください。
; ただし、Linuxカーネルなど、プログラムによっては、APBへのアクセスを禁止してしまうと、
; エラーとなり起動に失敗してしまう例がありますので注意してください。
;
;CS_APB_SW_ENABLE	FALSE
;CS_APB_SW_ENABLE	TRUE


; マルチコアCPUにおいて、本CFGファイルで指定しているCPUが、2つ目以降に起動する
; デバッガ接続先CPUの場合、リセット状態でも強制的にデバッガを起動します。
;
; 書式
;  MLT_FORCE_START	{TRUE | FALSE}
;	TRUE  ... リセット状態で強制的にデバッガを起動します。
;	FALSE ... リセット状態の場合は、メッセージダイアログを表示します。
;
; CPUがリセット状態でデバッガ起動するので、なんらかの処理（先にデバッガ起動
; しているところからレジスタライトなど）でリセット解除を行うまで、レジスタや
; メモリ書き換えなどの操作はできません。
;MLT_FORCE_START	TRUE
MLT_FORCE_START		FALSE


; ターゲットの初期化を行います。
; 特にバスコントロールユニット(BCU)やDRAMコントローラの初期を行われていないと
; デバッガ起動直後に、正しくメモリにアクセスできません。
; INITフィールドでは、起動時のIOやCPU内部レジスタの初期値を指定できます。
; INITフィールドは以下の書式で最大511個まで記述できます。
; 書式1 .. デバッガ起動時時に動作
;  INIT {CMD},{Adr},{Data}[,{Mask}][,{Aport}[,{/S|/NS}]]
;    "J_NO_RST ON/RUN","J_BOOT_MODE SLIP"が設定されている場合は、この設定は実行されません。
; 書式2 .. ユーザプログラムGo前に動作
;  INIT_GO {CMD},{Adr},{Data}[,{Mask}][,{Aport}[,{/S|/NS}]]
; 書式3 .. ユーザプログラムBreak後に動作
;  INIT_BRK {CMD},{Adr},{Data}[,{Mask}][,{Aport}[,{/S|/NS}]]
;	CMD : アクセスするデータサイズを指定します。
;               POB =8bit メモリライト
;               POW =16bit メモリライト
;               POD =32bit メモリライト
;               POQ =64bit メモリライト
;               COP = コプロセッサへライト(ARM926以上)
;               CPU = 汎用レジスタ(R0,..,R15,PC,CPSR,SPSR)
;               WAIT=　時間待ち(m秒単位)
;	Adr : メモリのアドレスを指定します。
;	Data: 書き込むデータを指定します。ビット単位でマスク指定可能
;	Mask: マスク値を指定します。Mask値で1が指定されたbitのみ更新されます。
;	      Mask値は省略可能です。省略した場合はすべてのbitが更新されます。
;	      すべてのbitがマスクされた場合、指定されたアドレスの読み出し動作
;	      のみ行われます。
;      Aport: アクセスに使用するCorsightのメモリアクセスポートを指定します。
;                未指定  = CPU経由でのアクセス
;                /AHB    = システムバスをアクセスするAHB-APまたはAXI-AP
;                /APB    = デバッグAPBをアクセスするAPB-AP
;                /CTEXM  = Cortex-Mの空間をアクセスするAHB-AP
;                /MEMAPn = MEM-APのアクセスポート番号"n"を指定します。複数のMEM-APが存在する場合に指定します。
;       /S  : AHB-AP,AXI-AP経由のアクセス時にセキュア転送を行います。
;       /NS : AHB-AP,AXI-AP経由のアクセス時に非セキュア転送を行います。
;
;       CMDにCOPを指定するとコプロセッサレジスタへのライトができます。
;         この場合、{Adr}には、MCR命令のオペランドに相当するパラメータリストを記述します。
;         たとえば MCR P15,0,R0,C15,C2,4   (R0=0x80000003) の動作を行う場合の記述例
;           INIT COP,P15,0,C15,C2,4,80000003
;       CMDにCPUを指定すると汎用レジスタの値をセットできます。(R0,..,R15,PC,CPSR,SPSR)
;           INIT CPU,R0,12345678
;       CMDにWAITを指定するとミリ秒単位の待ち時間を入れることができます。(デフォルト表記16進)。
;         この指定がない場合でも、各INIT行の間には1ミリ秒の時間がはいります。
;         それ以上の時間が必要な場合に記載してください。
;           INIT WAIT,_1000	... 10進数で 1秒待ちを指定
;
;*---- KZ-ARM7PCIの例 ---
;INIT	pod,0x80002200,6	; SYSCON3: --- CPU 73.728MHz , SDRAM 36.864MHz
;INIT	pod,0x80002300,0x522	; SDCONF : --- SDRAM 64Mbit/16bit/C_lat=2
;INIT	pod,0x80002340,_576	; SDRFPR : --- Refresh interval 16usec at (36MHz)
;INIT	pod,0x80000180,0x998c8c98	; MEMCFG1: --- CS3=32bit,CS2=CS1=CS0=16bit  3/3/2wait
;INIT	pod,0x80000280,@xxxxxxxx_xxxxxxxx_xxxxxxxx_xxxxxxx1


